[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "scholarscout-ai-research-assistant"
version = "1.0.0"
description = "An intelligent multi-agent system for automated research paper analysis"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Aagam", email = "your.email@example.com"},
]
maintainers = [
    {name = "Aagam", email = "your.email@example.com"},
]
keywords = [
    "ai",
    "research",
    "assistant",
    "langchain",
    "streamlit",
    "nlp",
    "machine-learning",
    "paper-analysis",
    "question-answering",
    "rag",
    "vector-database",
    "chromadb",
    "google-gemini",
    "arxiv",
    "academic-research",
    "document-processing",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Framework :: Streamlit",
]
requires-python = ">=3.8"
dependencies = [
    "streamlit>=1.28.0",
    "langchain-google-genai>=2.1.0",
    "langchain-community>=0.3.0",
    "langchain>=0.3.0",
    "chromadb>=1.0.0",
    "pypdf>=6.0.0",
    "google-search-results>=2.4.0",
    "arxiv>=2.1.0",
    "requests>=2.31.0",
    "nest-asyncio>=1.5.0",
    "beautifulsoup4>=4.12.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    # Code quality
    "black>=22.0.0",
    "flake8>=5.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    # Development tools
    "pre-commit>=2.20.0",
    "jupyter>=1.0.0",
    "jupyterlab>=3.6.0",
    "ipdb>=0.13.0",
    # Type stubs
    "types-requests>=2.28.0",
    "types-setuptools>=65.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.5.0",
    "mkdocstrings>=0.19.0",
    "mkdocs-jupyter>=0.24.0",
]
performance = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]
all = [
    "scholarscout-ai-research-assistant[dev,docs,performance]"
]

[project.urls]
Homepage = "https://github.com/namera45/ScholarScout-ai-research-assistant"
Documentation = "https://github.com/namera45/ScholarScout-ai-research-assistant#readme"
Repository = "https://github.com/namera45/ScholarScout-ai-research-assistant.git"
"Bug Tracker" = "https://github.com/namera45/ScholarScout-ai-research-assistant/issues"
Changelog = "https://github.com/namera45/ScholarScout-ai-research-assistant/blob/main/CHANGELOG.md"
"Live Demo" = "https://scholarscout.streamlit.app"

[project.scripts]
scholarscout = "streamlit_app:main"

[tool.hatch.version]
path = "streamlit_app.py"
pattern = "__version__ = ['\"](?P<version>[^'\"]*)['\"]"

[tool.hatch.build.targets.wheel]
packages = ["."]
exclude = [
    "/.git",
    "/.github",
    "/docs",
    "/tests",
    "/.pytest_cache",
    "/.mypy_cache",
    "/research_knowledge_base",
    "/chroma_db",
    "*.pdf",
    "*.log",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | research_knowledge_base
  | chroma_db
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["streamlit_app"]
skip_glob = ["research_knowledge_base/*", "chroma_db/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "research_knowledge_base",
    "chroma_db",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "research_knowledge_base/",
    "chroma_db/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "langchain.*",
    "langchain_google_genai.*",
    "langchain_community.*",
    "chromadb.*",
    "arxiv.*",
    "nest_asyncio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=streamlit_app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "research_knowledge_base/*",
    "chroma_db/*",
    "build/*",
    "dist/*",
    ".venv/*",
    "venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "research_knowledge_base",
    "chroma_db",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.bandit]
exclude_dirs = ["tests", "research_knowledge_base", "chroma_db"]
skips = ["B101", "B601"]